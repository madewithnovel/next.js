{
  "openapi": "3.0.3",
  "info": {
    "title": "Public API",
    "version": "1.0.0"
  },
  "components": {
    "securitySchemes": {
      "cookie": {
        "type": "apiKey",
        "name": "session",
        "in": "cookie"
      },
      "api": {
        "type": "http",
        "name": "bearer"
      }
    },
    "schemas": {
      "https://novel.dev/entities/access_control": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "access_control",
        "type": "object",
        "required": [
          "actor",
          "action",
          "subject"
        ],
        "additionalProperties": false,
        "properties": {
          "actor": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": false,
            "index": true,
            "primary": true
          },
          "type": {
            "type": "string",
            "field": "enum",
            "enum": [
              "can",
              "cannot"
            ],
            "nullable": true,
            "index": true,
            "primary": true
          },
          "action": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": false,
            "index": true,
            "primary": true
          },
          "subject": {
            "type": "object",
            "field": "jsonb",
            "nullable": false,
            "index": true,
            "primary": true
          },
          "fields": {
            "type": "object",
            "field": "jsonb",
            "nullable": true,
            "index": true,
            "primary": true
          }
        }
      },
      "https://novel.dev/entities/account_events": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "account_events",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "event_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "primary": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "field": "uuid",
            "nullable": true,
            "index": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "action": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "message": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true
          },
          "context": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/account_identities": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "account_identities",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "source": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "external_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "snapshot": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/account_inbox": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "account_inbox",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "notification_id": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true
          },
          "org_id": {
            "type": "string",
            "field": "string",
            "maxLength": 16,
            "nullable": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "read_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "notifications": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/notifications"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            ]
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/account_key_access": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "account_key_access",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "field": "uuid",
            "nullable": true,
            "index": true
          },
          "access_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true
          },
          "method": {
            "type": "string",
            "field": "enum",
            "enum": [
              "POST",
              "GET",
              "HEAD",
              "DELETE",
              "PATCH",
              "PUT"
            ],
            "nullable": true
          },
          "url": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "status": {
            "type": "number",
            "unsigned": false,
            "format": "int32",
            "field": "bigInteger",
            "nullable": true
          },
          "ip": {
            "type": "string",
            "format": "ipv4",
            "field": "inet",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "account_keys": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_keys"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_keys"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/account_keys": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "account_keys",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "access_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "unique": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "org_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "label": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true,
            "index": true
          },
          "expiry": {
            "type": "string",
            "field": "string",
            "maxLength": 12,
            "nullable": true
          },
          "secret_key": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "scope": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          },
          "account_key_access": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_key_access"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_key_access"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/account_notification_tokens": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "account_notification_tokens",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "source": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "endpoint": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "auth": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "key": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "muted_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/account_verifications": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "account_verifications",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "email": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true,
            "index": true
          },
          "type": {
            "type": "string",
            "field": "enum",
            "enum": [
              "verification",
              "magiclink",
              "reset"
            ],
            "nullable": true
          },
          "verification_token": {
            "type": "string",
            "field": "string",
            "maxLength": 18,
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/accounts": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "accounts",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "primary": true
          },
          "email": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true,
            "unique": true
          },
          "password_hash": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "url": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "display_name": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "picture": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "status": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "verified_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "blocked_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "account_identities": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_identities"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_identities"
                }
              }
            ]
          },
          "account_events": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_events"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_events"
                }
              }
            ]
          },
          "account_verifications": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_verifications"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_verifications"
                }
              }
            ]
          },
          "account_notification_tokens": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_notification_tokens"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_notification_tokens"
                }
              }
            ]
          },
          "organization_members": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organization_members"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization_members"
                }
              }
            ]
          },
          "organization_events": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organization_events"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization_events"
                }
              }
            ]
          },
          "invitations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/invitations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/invitations"
                }
              }
            ]
          },
          "account_keys": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_keys"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_keys"
                }
              }
            ]
          },
          "sessions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/sessions"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/sessions"
                }
              }
            ]
          },
          "notifications": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/notifications"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            ]
          },
          "account_inbox": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_inbox"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_inbox"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/cache": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "cache",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "key": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "unique": true
          },
          "value": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          }
        }
      },
      "https://novel.dev/entities/charges": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "charges",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "source": {
            "type": "string",
            "field": "string",
            "nullable": true,
            "index": true
          },
          "subscription_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "unsigned": true,
            "unique": true
          },
          "charge_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "unique": true
          },
          "product_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "pricing_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "customer_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true,
            "unique": true
          },
          "invoice_number": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true,
            "index": true
          },
          "invoice_permalink": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "subscriber_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "email": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true,
            "index": true
          },
          "quantity": {
            "type": "number",
            "unsigned": true,
            "format": "int64",
            "field": "bigInteger",
            "nullable": true,
            "defaultTo": 1
          },
          "amount": {
            "type": "number",
            "field": "money",
            "nullable": true
          },
          "amount_currency": {
            "type": "string",
            "field": "string",
            "maxLength": 3,
            "nullable": true,
            "index": true
          },
          "status": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "payment_method": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "metadata": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "subscriptions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/subscriptions"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/subscriptions"
                }
              }
            ]
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/configuration": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "configuration",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "setting": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true,
            "primary": true
          },
          "value": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          }
        }
      },
      "https://novel.dev/entities/feature_flags": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "feature_flags",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "primary": true
          },
          "description": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "field": "boolean",
            "nullable": true,
            "defaultTo": false
          },
          "distribution": {
            "type": "number",
            "unsigned": false,
            "format": "int32",
            "field": "bigInteger",
            "nullable": true
          },
          "condition": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          }
        }
      },
      "https://novel.dev/entities/files": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "files",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "original_filename": {
            "type": "string",
            "field": "text",
            "nullable": true,
            "index": true
          },
          "bucket": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "filename": {
            "type": "string",
            "field": "text",
            "nullable": true,
            "index": true
          },
          "hash": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "type": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "extension": {
            "type": "string",
            "field": "string",
            "maxLength": 12,
            "nullable": true,
            "index": true
          },
          "canonical_path": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "public_url": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "size": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "nullable": true
          },
          "uploaded_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          }
        }
      },
      "https://novel.dev/entities/invitations": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "invitations",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "org_id": {
            "type": "string",
            "field": "string",
            "maxLength": 16,
            "nullable": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "email": {
            "type": "string",
            "field": "string",
            "maxLength": 256,
            "nullable": true,
            "index": true
          },
          "invitation_code": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "unique": true
          },
          "role": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true,
            "index": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "accepted_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/notifications": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "notifications",
        "type": "object",
        "required": [
          "title"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "notification_id": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true,
            "unique": true
          },
          "org_id": {
            "type": "string",
            "field": "string",
            "maxLength": 16,
            "nullable": true
          },
          "author_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "title": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": false
          },
          "body": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true
          },
          "level": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "destination": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          },
          "account_inbox": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_inbox"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_inbox"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/organization_events": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "organization_events",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "event_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "primary": true
          },
          "request_id": {
            "type": "string",
            "format": "uuid",
            "field": "uuid",
            "nullable": true,
            "index": true
          },
          "org_id": {
            "type": "string",
            "field": "string",
            "maxLength": 16,
            "nullable": true,
            "index": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "action": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "message": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true
          },
          "context": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/organization_members": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "organization_members",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "org_id": {
            "type": "string",
            "field": "string",
            "maxLength": 16,
            "nullable": true,
            "primary": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "primary": true
          },
          "role": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true,
            "index": true
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/organizations": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "organizations",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "field": "string",
            "maxLength": 16,
            "nullable": true,
            "primary": true
          },
          "name": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "type": {
            "type": "string",
            "field": "enum",
            "enum": [
              "personal",
              "organization"
            ],
            "nullable": true,
            "index": true
          },
          "quotas": {
            "type": "object",
            "field": "jsonb",
            "nullable": true,
            "defaultTo": {}
          },
          "settings": {
            "type": "object",
            "field": "jsonb",
            "nullable": true,
            "defaultTo": {}
          },
          "customer_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "email": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true,
            "index": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "archived_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "subscriptions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/subscriptions"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/subscriptions"
                }
              }
            ]
          },
          "charges": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/charges"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/charges"
                }
              }
            ]
          },
          "organization_members": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organization_members"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization_members"
                }
              }
            ]
          },
          "organization_events": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organization_events"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organization_events"
                }
              }
            ]
          },
          "invitations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/invitations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/invitations"
                }
              }
            ]
          },
          "account_keys": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_keys"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_keys"
                }
              }
            ]
          },
          "notifications": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/notifications"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/notifications"
                }
              }
            ]
          },
          "account_inbox": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/account_inbox"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/account_inbox"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/rate_limits": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "rate_limits",
        "type": "object",
        "required": [
          "route",
          "source"
        ],
        "additionalProperties": false,
        "properties": {
          "route": {
            "type": "string",
            "field": "text",
            "nullable": false,
            "primary": true
          },
          "source": {
            "type": "string",
            "field": "text",
            "nullable": false,
            "primary": true
          },
          "hit": {
            "type": "number",
            "unsigned": true,
            "format": "int64",
            "field": "bigInteger",
            "nullable": true
          },
          "ttl": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "nullable": true
          }
        }
      },
      "https://novel.dev/entities/sessions": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "sessions",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "account_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "impersonator_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "session_id": {
            "type": "string",
            "field": "text",
            "nullable": true,
            "index": true
          },
          "access_token": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "refresh_token": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "ip": {
            "type": "string",
            "format": "ipv4",
            "field": "inet",
            "nullable": true
          },
          "useragent": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "country": {
            "type": "string",
            "field": "string",
            "maxLength": 3,
            "nullable": true
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "revoked_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "accounts": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/accounts"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/accounts"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/stripe_webhooks": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "stripe_webhooks",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "field": "string",
            "maxLength": 32,
            "nullable": true,
            "primary": true
          },
          "event": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "data": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "received_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true
          },
          "processed_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true
          }
        }
      },
      "https://novel.dev/entities/subscriptions": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "subscriptions",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "autoIncrement": true,
            "primary": true,
            "nullable": true
          },
          "source": {
            "type": "string",
            "field": "string",
            "nullable": true,
            "index": true
          },
          "subscription_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "unique": true
          },
          "product_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "pricing_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "customer_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "subscriber_id": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true
          },
          "email": {
            "type": "string",
            "field": "string",
            "maxLength": 255,
            "nullable": true,
            "index": true
          },
          "name": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true
          },
          "status": {
            "type": "string",
            "field": "string",
            "maxLength": 24,
            "nullable": true,
            "index": true
          },
          "meter": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true,
            "index": true
          },
          "amount": {
            "type": "number",
            "field": "money",
            "nullable": true
          },
          "amount_currency": {
            "type": "string",
            "field": "string",
            "maxLength": 3,
            "nullable": true,
            "index": true
          },
          "recurring_interval": {
            "type": "string",
            "field": "string",
            "maxLength": 12,
            "nullable": true,
            "index": true
          },
          "type": {
            "type": "string",
            "field": "enum",
            "enum": [
              "metered",
              "licensed"
            ],
            "nullable": true,
            "defaultTo": "licensed"
          },
          "metadata": {
            "type": "object",
            "field": "jsonb",
            "nullable": true,
            "defaultTo": {}
          },
          "flags": {
            "type": "object",
            "field": "jsonb",
            "nullable": true,
            "defaultTo": {}
          },
          "invoice_permalink": {
            "type": "string",
            "field": "text",
            "nullable": true
          },
          "billing_metadata": {
            "type": "object",
            "field": "jsonb",
            "nullable": true
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "period_start": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "period_end": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "trial_start": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "trial_end": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "renews_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "cancelled_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true
          },
          "organizations": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/organizations"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/organizations"
                }
              }
            ]
          },
          "charges": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/charges"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/charges"
                }
              }
            ]
          },
          "usage_reporting": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/usage_reporting"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/usage_reporting"
                }
              }
            ]
          }
        }
      },
      "https://novel.dev/entities/usage_reporting": {
        "$comment": "THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.",
        "title": "usage_reporting",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "subscription_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true
          },
          "metric": {
            "type": "string",
            "field": "string",
            "nullable": true,
            "index": true
          },
          "value": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "nullable": true,
            "defaultTo": 1
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "reported_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true
          },
          "subscriptions": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/subscriptions"
              },
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/subscriptions"
                }
              }
            ]
          }
        }
      },
      "json.$id": {
        "title": "usage_reporting",
        "type": "object",
        "required": [],
        "additionalProperties": false,
        "properties": {
          "required": {},
          "subscription_id": {
            "type": "string",
            "field": "string",
            "maxLength": 64,
            "nullable": true
          },
          "metric": {
            "type": "string",
            "field": "string",
            "nullable": true,
            "index": true
          },
          "value": {
            "type": "number",
            "unsigned": false,
            "format": "int64",
            "field": "bigInteger",
            "nullable": true,
            "defaultTo": 1
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true,
            "useTz": true,
            "defaultTo": null
          },
          "reported_at": {
            "type": "string",
            "format": "date-time",
            "field": "timestamp",
            "nullable": true
          }
        }
      }
    }
  },
  "paths": {
    "/api/v1/account/deactivate": {
      "post": {
        "operationId": "postAccountDeactivate",
        "summary": "Deactivate Account",
        "tags": [
          "Account"
        ],
        "description": "Deactivate an active account.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sudo_password"
                ],
                "properties": {
                  "sudo_password": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Account has been deactivated.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Account has been deactivated."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account/events": {
      "get": {
        "operationId": "getAccountEvents",
        "summary": "Account Events",
        "tags": [
          "Account"
        ],
        "description": "Search list of events relate to user actions triggered by `logger.account` or a record in the `AccountEvents` model.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/json.$id"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account/mfa": {
      "get": {
        "operationId": "getAccountMfaGenerate",
        "summary": "Generate MFA Secret",
        "tags": [
          "Account"
        ],
        "description": "Generates a QR and a secret that can be used by the user to register an authenticator.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mfa": {
                      "type": "object",
                      "properties": {
                        "qr": {
                          "type": "string"
                        },
                        "secret": {
                          "type": "string"
                        },
                        "remaining": {
                          "type": "integer"
                        },
                        "expires_at": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "putAccountMfaRegister",
        "summary": "Register MFA Secret",
        "tags": [
          "Account"
        ],
        "description": "Attach a TOTP secret to a user for use with MFA during login.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "token",
                  "secret"
                ],
                "properties": {
                  "token": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "secret": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "MFA secret registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "MFA secret registered successfully."
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccountMfaRevoke",
        "summary": "Revoke MFA secret",
        "tags": [
          "Account"
        ],
        "description": "Revoke registered secret so a user can register a new one. It is possible to register and overwrite an existing mfa secret.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sudo_password"
                ],
                "properties": {
                  "sudo_password": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "MFA secret revoked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "MFA secret revoked successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account": {
      "get": {
        "operationId": "getAccountProfile",
        "summary": "Account Profile",
        "tags": [
          "Account"
        ],
        "description": "Returns the available profile data for the currently logged in user.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "display_name": {
                          "type": "string"
                        },
                        "picture": {
                          "type": "string",
                          "format": "uri"
                        },
                        "url": {
                          "type": "string",
                          "format": "uri"
                        },
                        "verified": {
                          "type": "boolean"
                        },
                        "metadata": {
                          "additionalProperties": true,
                          "type": "object"
                        }
                      }
                    },
                    "settings": {
                      "additionalProperties": true,
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchAccountUpdate",
        "summary": "Update Account Profile",
        "tags": [
          "Account"
        ],
        "description": "Update the currently logged in account's profile.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "display_name": {
                    "type": "string",
                    "minLength": 6,
                    "transform": [
                      "trim"
                    ]
                  },
                  "picture": {
                    "type": "string",
                    "format": "uri",
                    "transform": [
                      "trim"
                    ]
                  },
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "User profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User profile updated successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account/security": {
      "get": {
        "operationId": "getAccountSecurity",
        "summary": "Account Security",
        "tags": [
          "Account"
        ],
        "description": "Returns the available security data for the currently logged in user.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "profile": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "password": {
                          "type": "boolean"
                        },
                        "verified": {
                          "type": "boolean"
                        },
                        "metadata": {
                          "additionalProperties": true,
                          "type": "object"
                        }
                      }
                    },
                    "mfa": {
                      "type": [
                        "null",
                        "string"
                      ],
                      "format": "date-time"
                    },
                    "sessions": {
                      "type": "array",
                      "items": {
                        "additionalProperties": true,
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account/sessions": {
      "get": {
        "operationId": "getAccountSessions",
        "summary": "Account Sessions",
        "tags": [
          "Account"
        ],
        "description": "Returns the available sessions related to the currently logged in user.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "sessions": {
                      "type": "array",
                      "items": {
                        "additionalProperties": true,
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteAccountSessionsRevoke",
        "summary": "Revoke Account Session",
        "tags": [
          "Account"
        ],
        "description": "Revoke a session related to the currently logged in user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "session_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Session revoked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Session revoked successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account/settings": {
      "get": {
        "operationId": "getAccountSettings",
        "summary": "Account Settings",
        "tags": [
          "Account"
        ],
        "description": "Settings related to the currently logged in user.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "settings": {
                      "additionalProperties": true,
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchAccountSettingsUpdate",
        "summary": "Update Account Settings",
        "tags": [
          "Account"
        ],
        "description": "Update the currently logged in account's settings.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "theme": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "timezone": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "language": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "marketing": {
                    "type": "boolean"
                  },
                  "newsletter": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "User configuration updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User configuration updated successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/account/password": {
      "post": {
        "operationId": "postAccountUpdatePassword",
        "summary": "Update Account Password",
        "tags": [
          "Account"
        ],
        "description": "Update the currently logged in account's password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "password",
                  "new_password"
                ],
                "properties": {
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 64,
                    "transform": [
                      "trim"
                    ]
                  },
                  "new_password": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 64,
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "User password updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "User password updated successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/api-keys/events": {
      "get": {
        "operationId": "getApiKeyAccess",
        "summary": "Key Events",
        "tags": [
          "Keys"
        ],
        "description": "List the events related to a key.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "request_id": {
                            "type": "string"
                          },
                          "access_id": {
                            "type": "string"
                          },
                          "timestamp": {
                            "type": "string"
                          },
                          "method": {
                            "type": "string"
                          },
                          "url": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string"
                          },
                          "ip": {
                            "type": "string"
                          },
                          "origin": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/api-keys": {
      "post": {
        "operationId": "postApiKeyGenerate",
        "summary": "Generate Key",
        "tags": [
          "Keys"
        ],
        "description": "Generate an API key attached to the currently logged in user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "scope": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "expiry": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Key generated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Key generated successfully.",
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "object",
                      "properties": {
                        "access_id": {
                          "type": "string"
                        },
                        "secret_key": {
                          "type": "string"
                        },
                        "label": {
                          "type": "string"
                        },
                        "scope": {
                          "type": "string"
                        },
                        "expiry": {
                          "type": "string"
                        },
                        "expired": {
                          "type": "boolean"
                        },
                        "created_at": {
                          "type": "string"
                        },
                        "expires_at": {
                          "type": "string"
                        },
                        "last_used": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getApiKeyList",
        "summary": "Key List",
        "tags": [
          "Keys"
        ],
        "description": "List the keys available to the currently logged in session.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "keys": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "access_id": {
                            "type": "string"
                          },
                          "secret_key": {
                            "type": "string"
                          },
                          "label": {
                            "type": "string"
                          },
                          "scope": {
                            "type": "string"
                          },
                          "expiry": {
                            "type": "string"
                          },
                          "expired": {
                            "type": "boolean"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "expires_at": {
                            "type": "string"
                          },
                          "last_used": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteApiKeyRevoke",
        "summary": "Revoke API Key",
        "tags": [
          "Keys"
        ],
        "description": "Revoke the api key related to the currently logged in user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "access_id": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "API key revoked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "API key revoked successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/csrf": {
      "get": {
        "operationId": "getAppCsrf",
        "summary": "Current CSRF",
        "tags": [
          "Application"
        ],
        "description": "Get the CSRF of the current session.",
        "security": [],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "csrf": {
                      "type": "string",
                      "transform": [
                        "trim"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/{strategy}/callback": {
      "get": {
        "operationId": "getAuthCallback",
        "summary": "Auth Callback",
        "tags": [
          "Auth"
        ],
        "description": "Callback called by an authentication strategy available to the application.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "strategy",
            "required": true
          }
        ],
        "security": [],
        "responses": {
          "301": {
            "description": "Authentication successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authentication successful. Redirecting to next step..."
                }
              }
            }
          }
        }
      }
    },
    "/auth/forgot": {
      "post": {
        "operationId": "postAuthForgot",
        "summary": "Start Reset Password",
        "tags": [
          "Auth"
        ],
        "description": "Start a reset password attempt.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [],
        "responses": {
          "204": {
            "description": "Forget password attempt created.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Forget password attempt created."
                }
              }
            }
          }
        }
      }
    },
    "/auth/{strategy}/mfa": {
      "post": {
        "operationId": "postAuthMfa",
        "summary": "Final MFA Step",
        "tags": [
          "Auth"
        ],
        "description": "Proceed to the application after a successful MFA attempt.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "otp": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "strategy",
            "required": true
          }
        ],
        "security": [],
        "responses": {
          "301": {
            "description": "Authentication successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authentication successful. Redirecting to next step..."
                }
              }
            }
          }
        }
      }
    },
    "/auth/passwordless/verify": {
      "get": {
        "operationId": "getAuthPasswordless",
        "summary": "Auth Passwordless",
        "tags": [
          "Auth"
        ],
        "description": "Authenticate by passwordless strategy available to the application.",
        "security": [],
        "responses": {
          "301": {
            "description": "Authentication successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authentication successful. Redirecting to next step..."
                }
              }
            }
          }
        }
      }
    },
    "/signup/intent": {
      "post": {
        "operationId": "postAuthPaymentIntent",
        "summary": "Generate Payment Intent",
        "tags": [
          "Auth"
        ],
        "description": "Create a payment intent to be used for upfront payment collection.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plan": {
                    "type": "string"
                  },
                  "org_id": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [],
        "responses": {
          "200": {
            "description": "Payment intent creation successful.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payment intent creation successful.",
                  "type": "object",
                  "properties": {
                    "intent": {
                      "type": "object",
                      "properties": {
                        "client_secret": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/reset": {
      "post": {
        "operationId": "postAuthReset",
        "summary": "Reset Password",
        "tags": [
          "Auth"
        ],
        "description": "Final step in resetting a user's password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "token"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "transform": [
                      "trim"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "token": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [],
        "responses": {
          "201": {
            "description": "Reset successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Reset successful. Redirecting to next step...",
                  "type": "object",
                  "properties": {
                    "redirect_to": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/signup": {
      "post": {
        "operationId": "postAuthSignup",
        "summary": "Sign Up",
        "tags": [
          "Auth"
        ],
        "description": "Start the sign up process.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "transform": [
                      "trim"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "intent": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "interval": {
                    "enum": [
                      "month",
                      "year"
                    ],
                    "transform": [
                      "trim"
                    ]
                  },
                  "plan": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "method": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "invitation_code": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [],
        "responses": {
          "200": {
            "description": "Sign up successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Sign up successful. Redirecting to next step...",
                  "type": "object",
                  "properties": {
                    "redirect_to": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/{strategy}": {
      "post": {
        "operationId": "postAuthStrategy",
        "summary": "Auth by Strategy",
        "tags": [
          "Auth"
        ],
        "description": "Authenticate by strategy available to the application.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "transform": [
                      "trim"
                    ]
                  },
                  "password": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "strategy",
            "required": true
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "Authentication successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authentication successful. Redirecting to next step...",
                  "type": "object",
                  "properties": {
                    "redirect_to": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "301": {
            "description": "Authentication successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authentication successful. Redirecting to next step..."
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getAuthStrategy",
        "summary": "Auth by Strategy",
        "tags": [
          "Auth"
        ],
        "description": "Authenticate by strategy available to the application.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "strategy",
            "required": true
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "Authentication successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authentication successful. Redirecting to next step...",
                  "type": "object",
                  "properties": {
                    "redirect_to": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "301": {
            "description": "Authentication successful. Redirecting to next step...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authentication successful. Redirecting to next step..."
                }
              }
            }
          }
        }
      }
    },
    "/files/{key}": {
      "get": {
        "operationId": "getFilesFetch",
        "summary": "Fetch File",
        "tags": [
          "Files"
        ],
        "description": "If using local driver for file system. Fetch the file.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "key",
            "required": true,
            "description": "File path"
          }
        ],
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "File is present.",
            "content": {
              "*/*": {
                "schema": {
                  "description": "File is present.",
                  "type": "string",
                  "format": "binary",
                  "contentEncoding": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "description": "File is present.",
                  "type": "string",
                  "format": "binary",
                  "contentEncoding": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File does not exist.",
            "content": {
              "*/*": {
                "schema": {
                  "description": "File does not exist."
                }
              },
              "application/json": {
                "schema": {
                  "description": "File does not exist."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/files/presign": {
      "put": {
        "operationId": "putFilesPresign",
        "summary": "Presign Files",
        "tags": [
          "Files"
        ],
        "description": "Presign the file to be used and return a signed url.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "key",
                  "type"
                ],
                "properties": {
                  "key": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "type": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Pre signed URL",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Pre signed URL",
                  "type": "object",
                  "properties": {
                    "file": {
                      "type": "object",
                      "properties": {
                        "presigned_url": {
                          "type": "string",
                          "description": "The Pre signed URL that can be used for the operation"
                        },
                        "public": {
                          "type": "boolean"
                        },
                        "type": {
                          "type": "string"
                        },
                        "original": {
                          "type": "string"
                        },
                        "key": {
                          "type": "string"
                        },
                        "asset_url": {
                          "type": "string",
                          "description": "The URL to the asset"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/files{*}": {
      "put": {
        "operationId": "putFilesUpload",
        "summary": "Upload Files",
        "tags": [
          "Files"
        ],
        "description": "If using local driver for file system. Accept file uploads.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary",
                "contentEncoding": "binary"
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "*",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "File has been uploaded successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "File has been uploaded successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/notifications/archive": {
      "post": {
        "operationId": "postNotificationsArchive",
        "summary": "Mark as Archive",
        "tags": [
          "Notification"
        ],
        "description": "Mark notifications as archived.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Notification archived successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Notification archived successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/notifications/register": {
      "delete": {
        "operationId": "deleteNotificationsDeregister",
        "summary": "Deregister Token",
        "tags": [
          "Notification"
        ],
        "description": "Deregister the push token related to the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Token deregistered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Token deregistered successfully."
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "postNotificationsRegister",
        "summary": "Register Token",
        "tags": [
          "Notification"
        ],
        "description": "Register the push token related to the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "endpoint": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "auth": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "key": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Push token registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Push token registered successfully."
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getNotificationsVapid",
        "summary": "Get Vapid Key",
        "tags": [
          "Notification"
        ],
        "description": "Get the vapid key used for web push registration.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "vapid_key": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/notifications": {
      "get": {
        "operationId": "getNotificationsList",
        "summary": "List Notifications",
        "tags": [
          "Notification"
        ],
        "description": "List all notifications available to the currently logged in user.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "notifications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "author_id": {
                            "type": "string"
                          },
                          "received_at": {
                            "type": "string"
                          },
                          "read": {
                            "type": "boolean"
                          },
                          "title": {
                            "type": "string"
                          },
                          "body": {
                            "type": "string"
                          },
                          "icon": {
                            "type": "string"
                          },
                          "level": {
                            "type": "string"
                          },
                          "metadata": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    },
                    "invites": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "invitation_code": {
                            "type": "string"
                          },
                          "organization": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string"
                              },
                              "name": {
                                "type": "string"
                              }
                            }
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "expires_at": {
                            "type": "string"
                          },
                          "expired": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/notifications/read": {
      "post": {
        "operationId": "postNotificationsRead",
        "summary": "Mark as Read",
        "tags": [
          "Notification"
        ],
        "description": "Mark notifications as read.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Notification marked as read successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Notification marked as read successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization": {
      "post": {
        "operationId": "postOrganizationCreate",
        "summary": "Create Organization",
        "tags": [
          "Organization"
        ],
        "description": "Create a new organization tied to the user making the request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 6
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "transform": [
                      "trim"
                    ]
                  },
                  "personal": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Organization has been created.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Organization has been created.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteOrganizationDeactivate",
        "summary": "Deactivate Organization",
        "tags": [
          "Organization"
        ],
        "description": "Deactivate an organization tied to the currently logged in session.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "sudo_password",
                  "org_id"
                ],
                "properties": {
                  "sudo_password": {
                    "type": "string"
                  },
                  "org_id": {
                    "type": "string",
                    "minLength": 6
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Organization has been deactivated.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Organization has been deactivated."
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "getOrganizationDetail",
        "summary": "Organization Detail",
        "tags": [
          "Organization"
        ],
        "description": "Details of the organization.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organization": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "transform": [
                            "trim"
                          ]
                        },
                        "quotas": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "settings": {
                          "type": "object",
                          "additionalProperties": true
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchOrganizationUpdate",
        "summary": "Update Organization",
        "tags": [
          "Organization"
        ],
        "description": "Update the detail of the current organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 3,
                    "transform": [
                      "trim"
                    ]
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Updated organization successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Updated organization successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization/events": {
      "get": {
        "operationId": "getOrganizationEvents",
        "summary": "Organization Events",
        "tags": [
          "Organization"
        ],
        "description": "Events that have happened within the organization.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "request_id": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "event_id": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "timestamp": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "action": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "message": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "context": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization/invite": {
      "post": {
        "operationId": "postOrganizationInvite",
        "summary": "Invite to Organization",
        "tags": [
          "Organization"
        ],
        "description": "Invite a particular user/email to the organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invites": {
                    "type": "array",
                    "description": "List of emails to invite.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email"
                        },
                        "roles": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Invite sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invite sent successfully."
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteOrganizationInviteRevoke",
        "summary": "Revoke Organization Invitation",
        "tags": [
          "Organization"
        ],
        "description": "Revoke the invitation sent by the currently logged in user from an organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invites": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "email": {
                          "type": "string",
                          "format": "email"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Invitations revoked successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invitations revoked successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization/invite/accept": {
      "post": {
        "operationId": "postOrganizationInviteAccept",
        "summary": "Accept Organization Invitation",
        "tags": [
          "Organization"
        ],
        "description": "Accept an invitation coming from an organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invitation_code": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Invite accepted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invite accepted successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization/invite/reject": {
      "delete": {
        "operationId": "deleteOrganizationInviteReject",
        "summary": "Reject Organization Invitation",
        "tags": [
          "Organization"
        ],
        "description": "Reject an invitation coming from an organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "invitation_code": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Invite rejected successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Invite rejected successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organizations": {
      "get": {
        "operationId": "getOrganizationList",
        "summary": "List of Organizations",
        "tags": [
          "Organization"
        ],
        "description": "List of organizations belonging to the currently logged in user.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "organizations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "transform": [
                              "trim"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization/members": {
      "get": {
        "operationId": "getOrganizationMembers",
        "summary": "List Members of Organization",
        "tags": [
          "Organization"
        ],
        "description": "List the members of the current organization in the session.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "role": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "transform": [
                              "trim"
                            ]
                          },
                          "display_name": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "picture": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "metadata": {
                            "type": "object",
                            "additionalProperties": true
                          },
                          "status": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "mfa": {
                            "type": "boolean"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteOrganizationMembersRemove",
        "summary": "Remove Organization Member",
        "tags": [
          "Organization"
        ],
        "description": "Remove a member of an organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account_id": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Member removed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Member removed successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization/promote": {
      "post": {
        "operationId": "postOrganizationMembersPromote",
        "summary": "Promote Organization Member",
        "tags": [
          "Organization"
        ],
        "description": "Promote a member of an organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "account_id": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "transform": [
                        "trim"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Member promoted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Member promoted successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/organization/settings": {
      "get": {
        "operationId": "getOrganizationSettings",
        "summary": "Organization Settings",
        "tags": [
          "Organization"
        ],
        "description": "Settings of the organization.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/session": {
      "get": {
        "operationId": "getSessionContext",
        "summary": "Session Context",
        "tags": [
          "Application"
        ],
        "description": "Get the important details required when accessing an authenticated screen.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "session": {
                      "type": "object",
                      "properties": {
                        "live": {
                          "type": "boolean"
                        },
                        "flags": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "organizations": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "name": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "type": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              }
                            }
                          }
                        },
                        "organization": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            },
                            "name": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            },
                            "type": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            }
                          }
                        },
                        "subscribed": {
                          "type": "boolean"
                        },
                        "subscription": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            },
                            "status": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            },
                            "subscription_id": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            }
                          }
                        },
                        "user": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            },
                            "email": {
                              "type": "string",
                              "format": "email",
                              "transform": [
                                "trim"
                              ]
                            },
                            "display_name": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            },
                            "picture": {
                              "type": "string",
                              "transform": [
                                "trim"
                              ]
                            }
                          }
                        },
                        "settings": {
                          "type": "object",
                          "additionalProperties": true
                        },
                        "role": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "permissions": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "additionalProperties": true
                          }
                        },
                        "version": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "fetched": {
                          "type": "string",
                          "format": "date-time",
                          "transform": [
                            "trim"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/session/end": {
      "get": {
        "operationId": "getSessionEnd",
        "summary": "End Session",
        "tags": [
          "Session"
        ],
        "description": "End the current session.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "301": {
            "description": "Redirecting to the logout screen...",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Redirecting to the logout screen..."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/session/switch": {
      "post": {
        "operationId": "postSessionSwitch",
        "summary": "Switch Organization",
        "tags": [
          "Application"
        ],
        "description": "Switch organization of the current session.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "org_id": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Switched organization successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Switched organization successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription/cancel": {
      "post": {
        "operationId": "postSubscriptionsCancel",
        "summary": "Cancel Subscription",
        "tags": [
          "Subscription"
        ],
        "description": "Cancel the subscription currently applied to the organization.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription cancelled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Subscription cancelled successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription": {
      "get": {
        "operationId": "getSubscriptionsCurrent",
        "summary": "Current Subscription",
        "tags": [
          "Subscription"
        ],
        "description": "Return the current subscription the organization has active at the time of request.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "subscribed": {
                      "type": "boolean"
                    },
                    "organization": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "name": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "type": {
                          "type": "string",
                          "transform": [
                            "trim"
                          ]
                        },
                        "email": {
                          "type": "string",
                          "format": "email",
                          "transform": [
                            "trim"
                          ]
                        }
                      }
                    },
                    "subscription": {
                      "status": {
                        "type": "string",
                        "transform": [
                          "trim"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "transform": [
                          "trim"
                        ]
                      },
                      "started_at": {
                        "type": "string",
                        "format": "date-time",
                        "transform": [
                          "trim"
                        ]
                      },
                      "period_start": {
                        "type": "string",
                        "format": "date-time",
                        "transform": [
                          "trim"
                        ]
                      },
                      "period_end": {
                        "type": "string",
                        "format": "date-time",
                        "transform": [
                          "trim"
                        ]
                      },
                      "trial_start": {
                        "type": "string",
                        "format": "date-time",
                        "transform": [
                          "trim"
                        ]
                      },
                      "trial_end": {
                        "type": "string",
                        "format": "date-time",
                        "transform": [
                          "trim"
                        ]
                      },
                      "renews_at": {
                        "type": "string",
                        "format": "date-time",
                        "transform": [
                          "trim"
                        ]
                      }
                    },
                    "quotas": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "payment_methods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "card": {
                            "type": "object",
                            "properties": {
                              "brand": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "last4": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "expiry_month": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "expiry_year": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "charges": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "number": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "invoice": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "invoice_pdf": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "status": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "amount": {
                            "type": "string"
                          },
                          "currency": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "payment_method": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "email": {
                            "type": "string",
                            "format": "email",
                            "transform": [
                              "trim"
                            ]
                          },
                          "paid_at": {
                            "type": "string",
                            "format": "date-time",
                            "transform": [
                              "trim"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription/cards": {
      "get": {
        "operationId": "getSubscriptionsMethods",
        "summary": "Current Payment Methods",
        "tags": [
          "Subscription"
        ],
        "description": "Return the payment methods available to the organization has active at the time of request.",
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "payment_methods": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "card": {
                            "type": "object",
                            "properties": {
                              "brand": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "last4": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "expiry_month": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              },
                              "expiry_year": {
                                "type": "string",
                                "transform": [
                                  "trim"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription/methods": {
      "post": {
        "operationId": "postSubscriptionsMethodsAdd",
        "summary": "Add Payment Method",
        "tags": [
          "Subscription"
        ],
        "description": "Add the payment method related to a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "payment_method",
                  "setup_intent"
                ],
                "properties": {
                  "payment_method": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "setup_intent": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Payment method added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payment method added successfully."
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSubscriptionsMethodsRemove",
        "summary": "Remove Payment Method",
        "tags": [
          "Subscription"
        ],
        "description": "Remove the payment method related to a user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "payment_method_id"
                ],
                "properties": {
                  "payment_method_id": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Payment method removed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Payment method removed successfully."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/plans": {
      "get": {
        "operationId": "getSubscriptionsPlans",
        "summary": "List Subscription Plans",
        "tags": [
          "Application"
        ],
        "description": "List the plans available to a user.",
        "security": [],
        "responses": {
          "200": {
            "description": "Default Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "plans": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "transform": [
                              "trim"
                            ]
                          },
                          "monthly": {
                            "type": "object",
                            "additionalProperties": true
                          },
                          "yearly": {
                            "type": "object",
                            "additionalProperties": true
                          },
                          "trial": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/subscription/upgrade": {
      "post": {
        "operationId": "postSubscriptionsSubscribe",
        "summary": "Subscribe to Subscription",
        "tags": [
          "Subscription"
        ],
        "description": "Subscribe to an available plan.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "plan": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "intent": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "method": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  },
                  "interval": {
                    "type": "string",
                    "transform": [
                      "trim"
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "cookie": []
          }
        ],
        "responses": {
          "204": {
            "description": "Subscription created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Subscription created successfully."
                }
              }
            }
          }
        }
      }
    }
  }
}