import { z } from "zod"

export const subscriptions = z.object({ "id": z.number().int().nullable().optional(), "source": z.string().nullable().optional(), "subscription_id": z.string().max(64).nullable().optional(), "product_id": z.string().max(64).nullable().optional(), "pricing_id": z.string().max(64).nullable().optional(), "customer_id": z.string().max(64).nullable().optional(), "subscriber_id": z.string().max(24).nullable().optional(), "email": z.string().max(255).nullable().optional(), "name": z.string().max(64).nullable().optional(), "status": z.string().max(24).nullable().optional(), "meter": z.string().max(64).nullable().optional(), "amount": z.number().nullable().optional(), "amount_currency": z.string().max(3).nullable().optional(), "recurring_interval": z.string().max(12).nullable().optional(), "type": z.enum(["metered","licensed"]).nullable().optional(), "metadata": z.record(z.any()).nullable().optional(), "flags": z.record(z.any()).nullable().optional(), "invoice_permalink": z.string().nullable().optional(), "billing_metadata": z.record(z.any()).nullable().optional(), "started_at": z.string().datetime({ offset: true }).nullable().optional(), "paid_at": z.string().datetime({ offset: true }).nullable().optional(), "period_start": z.string().datetime({ offset: true }).nullable().optional(), "period_end": z.string().datetime({ offset: true }).nullable().optional(), "trial_start": z.string().datetime({ offset: true }).nullable().optional(), "trial_end": z.string().datetime({ offset: true }).nullable().optional(), "renews_at": z.string().datetime({ offset: true }).nullable().optional(), "cancelled_at": z.string().datetime({ offset: true }).nullable().optional() }).strict()
export type Subscriptions = z.infer<typeof subscriptions>
