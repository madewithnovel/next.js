import { z } from "zod"

export const charges = z.object({ "id": z.number().int().nullable().optional(), "source": z.string().nullable().optional(), "subscription_id": z.string().max(64).nullable().optional(), "charge_id": z.string().max(64).nullable().optional(), "product_id": z.string().max(64).nullable().optional(), "pricing_id": z.string().max(64).nullable().optional(), "customer_id": z.string().max(64).nullable().optional(), "invoice_number": z.string().max(32).nullable().optional(), "invoice_permalink": z.string().nullable().optional(), "subscriber_id": z.string().max(24).nullable().optional(), "email": z.string().max(255).nullable().optional(), "quantity": z.number().int().nullable().optional(), "amount": z.number().nullable().optional(), "amount_currency": z.string().max(3).nullable().optional(), "status": z.string().max(24).nullable().optional(), "payment_method": z.string().max(64).nullable().optional(), "metadata": z.record(z.any()).nullable().optional(), "created_at": z.string().datetime({ offset: true }).nullable().optional(), "paid_at": z.string().datetime({ offset: true }).nullable().optional(), "updated_at": z.string().datetime({ offset: true }).nullable().optional(), "archived_at": z.string().datetime({ offset: true }).nullable().optional() }).strict()
export type Charges = z.infer<typeof charges>
